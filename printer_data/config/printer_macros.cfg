#####################################################################
# 	All Macros
#####################################################################

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z30 F3600

#####################################################################
#   Load & Unload
#####################################################################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  100
variable_purge_distance:  25
variable_nozzle_preheat_temp: 250  # Default preheat temperature for the nozzle
variable_turn_off_extruder: True   # Option to turn off the extruder after loading (True/False)
gcode:
    # Parameters and settings
    {% set load_speed = params.LOAD_SPEED|default(300) %}  # Speed in mm/min for fast filament loading
    {% set purge_speed = params.PURGE_SPEED|default(150) %}  # Speed in mm/min for purging filament
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp) %}  # Target temperature for the nozzle
    {% set min_temp = params.MIN_TEMP|default(180) %}  # Minimum safe temperature for extrusion

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=load_state

    # Heat directly to the target temperature if it's above the minimum temperature
    {% if target_temp >= min_temp %}
        M104 S{target_temp} ; Set extruder to target temperature
        M109 S{target_temp} ; Wait for extruder to reach target temperature
    {% else %}
        # Heat to minimum temperature first if target is too low
        M104 S{min_temp} ; Set extruder to safe minimum temperature
        M109 S{min_temp} ; Wait for extruder to reach safe minimum temperature
    {% endif %}

    # Begin filament loading process
    G91 ; Set relative positioning for extrusion
    G92 E0 ; Reset extruder position
    G1 E{load_distance} F{load_speed} ; Load filament at the specified loading speed
    G1 E{purge_distance} F{purge_speed} ; Purge filament at the slower purging speed

    # Optionally turn off the extruder heater after loading
    {% if turn_off_extruder %}
        M104 S0 ; Turn off extruder heater
    {% endif %}

    # Restore previous state of the printer
    G90 ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=load_state

    # Completion message
    M117 Filament load complete

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  100
variable_nozzle_preheat_temp: 250  # Default preheat temperature for unloading
variable_turn_off_extruder: True   # Option to turn off the extruder after unloading (True/False)
gcode:
    # Parameters and settings
    {% set retract_speed = params.RETRACT_SPEED|default(600) %}  # Speed for retracting filament
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp) %}  # Target temperature for the nozzle
    {% set min_temp = params.MIN_TEMP|default(180) %}  # Minimum safe temperature for extrusion

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=unload_state

    # Heat the nozzle to the target temperature if required
    {% if printer.extruder.temperature < target_temp %}
        # Ensure the nozzle is heated to the target temperature or at least the minimum safe temperature
        {% if target_temp >= min_temp %}
            M104 S{target_temp} ; Set extruder to target temperature
            M109 S{target_temp} ; Wait for extruder to reach target temperature
        {% else %}
            M104 S{min_temp} ; Set extruder to safe minimum temperature
            M109 S{min_temp} ; Wait for extruder to reach safe minimum temperature
        {% endif %}
    {% endif %}

    # Begin filament unloading process
    G91 ; Set relative positioning for extrusion
    G92 E0 ; Reset extruder position
    G1 E-{unload_distance} F{retract_speed} ; Retract filament at the specified speed

    # Optionally turn off the extruder heater after unloading
    {% if turn_off_extruder %}
        M104 S0 ; Turn off extruder heater
    {% endif %}

    # Restore previous state of the printer
    G90 ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=unload_state

    # Clear Spoolman Active Spool
    CLEAR_ACTIVE_SPOOL

    # Completion message
    M117 Filament unload complete


#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)

[gcode_macro _PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Start Bed Heating
  M190 S{target_bed}

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  _status_homing                                        # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  ## Clean Nozzle
  # Park the Nozzle over the bucket
  # Heat up the hotend up to target via data from slicer
  _CLEAN_NOZZLE_PARK
  SET_DISPLAY_TEXT MSG="Cleaning Nozzle: {target_extruder}c"     # Display info on display
  _status_heating                                        # Set LEDs to heating-mode
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp
  # Clean Nozzle Ready to Print.
  _status_cleaning
  _CLEAN_NOZZLE

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  M104 S150                                             # Heat hotend to 150c

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    _status_heating                                     # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=BedFans VALUE=1                         # Turn on The Filter

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    _M141 S{target_chamber}                             # Set the chamber target temp
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    _status_heating                                     # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    SET_DISPLAY_TEXT MSG="Heat Soak"                    # Display info on display
    G4 P200000                                          # Wait 200 Seconds
  {% endif %}


  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  _status_calibrating_z                                # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  G28 Z                                                # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  _status_meshing                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Final Heating: {target_extruder}c"     # Display info on display
  _status_heating                                       # Set LEDs to heating-mode
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  _CONFIGURE_FILAMENT_OFFSET FILAMENT_TYPE={FILAMENT_TYPE}

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printing..."                    # Display info on display
  _status_printing                                      # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position
   

[gcode_macro _PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           # wait for buffer to clear
    G92 E0                         # zero the extruder
    G1 E-10.0 F3600                # retract filament
    G91                            # relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    # move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           # turn off fan
    G1 Z2 F3000                    # move nozzle up 2mm
    G90                            # absolute positioning
    G0  X125 Y250 F3600            # park nozzle at rear
    BED_MESH_CLEAR
    M18                            # Turn off stepper motors
    update_git MESSAGE="Update Spoolman Useage"

[gcode_macro _M141]
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}


#####################################################################
#   Nozzle Clean
#####################################################################

[gcode_macro _CLEAN_NOZZLE_PARK]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

  G90

  ## Set this position right above the bucket.
  G1 X282 Y305 Z3 F6000

[gcode_macro _CLEAN_NOZZLE]
variable_start_x: 276
variable_start_y: 307
variable_start_z: 1.5 ; Set this Z distance so that at least half the nozzle is buried in the silicone bristles to ensure a good scrubbing.
variable_wipe_dist: -40
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 20

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90 ; absolute positioning
 
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 X{start_x + 8} Z{raise_distance}


[gcode_macro _CONFIGURE_FILAMENT_OFFSET]
gcode:
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE %}

    {% if FILAMENT_TYPE == 'PLA' %}   
        SET_GCODE_OFFSET Z=-0.015
    
    {% elif FILAMENT_TYPE == 'PLA Pro' %}   
        SET_GCODE_OFFSET Z=-0.015
    
    {% elif FILAMENT_TYPE in ['PET','PETG'] %}      
        SET_GCODE_OFFSET Z=+0.075

    
    {% elif FILAMENT_TYPE in ['ASA','ABS'] %} 
        SET_GCODE_OFFSET Z=-0.030
    
    {% else %}   
        # Other kind of filament we reset to 0
        SET_GCODE_OFFSET Z=0.0
    {% endif %}


#####################################################################
#   Stealth Burner LED Macros
#####################################################################

##########################
# LED Effects Animations #
##########################

##################
## logo effects ##
##################

[led_effect _sb_logo_busy]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
    breathing  3 1 top (1,0,0)

[led_effect _sb_logo_cleaning]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
    breathing  3 1 top (0.0, 0.02, 0.5)

[led_effect _sb_logo_calibrating_z]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.0, 0.0, 0.35)

[led_effect _sb_logo_heating]
leds:
    neopixel:sb_leds (1)
autostart:                          false
frame_rate:                         24
layers:
     breathing  3 1 top (1, 0.18, 0)

[led_effect _sb_logo_cooling]
leds:
    neopixel:sb_leds (1)
autostart:                          false
frame_rate:                         24
layers:
     breathing  3 1 top (0, 0, 1)

[led_effect _sb_logo_homing]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.0, 0.6, 0.2)

[led_effect _sb_logo_leveling]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.5, 0.1, 0.4)

[led_effect _sb_logo_meshing]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.2, 1.0, 0.0)

[led_effect _sb_logo_printing]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
    gradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)

[led_effect _sb_logo_standby]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.01, 0.01, 0.01)

[led_effect _sb_logo_part_ready]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
layers:
        breathing  3 1 top (0.0, 1.0, 0.0)

####################
## nozzle effects ##
####################

[led_effect _sb_nozzle_heating]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
layers:
        breathing  3 1 top (1.0, 0.18, 0.0, 0.0)

[led_effect _sb_nozzle_cooling]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
layers:
        breathing  3 1 top (0.0, 0.0, 1.0, 0.1)

[led_effect _sb_nozzle_standby]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
layers:
        breathing  3 1 top (0.6, 0.0, 0.0, 0.0)

[led_effect _sb_nozzle_part_ready]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
layers:
        breathing  3 1 top (0.6, 1.0, 0.0, 0.1)

#####################
## all led effects ##
#####################

[led_effect _sb_critical_error]
leds:
    neopixel:sb_leds
layers:
    strobe         1  1.5   add        (1.0,  1.0, 1.0)
    breathing      2  0     difference (0.95, 0.0, 0.0)
    static         1  0     top        (1.0,  0.0, 0.0)
autostart:                             false
frame_rate:                            24
run_on_error:                          true


[led_effect _rainbow]
leds:
    neopixel:sb_leds
autostart:                          true
frame_rate:                         24
layers:
    gradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)

#######################
# LED Effects Statics #
#######################

[led_effect _set_nozzle_leds]
leds:
    neopixel:sb_leds (2,3)
   #neopixel:caselight
autostart:                          false
frame_rate:                         24
layers:
    static         0  0     top        (0.0,  0.0, 0.0, 1.0)

[led_effect _set_logo_leds]
leds:
    neopixel:sb_leds (1)
autostart:                          false
frame_rate:                         24
layers:
    static         0  0     top        (1.0,  1.0, 1.0)

##############
# The Macros #
##############

[gcode_macro _set_logo_leds_off]
gcode:
    SET_LED_EFFECT EFFECT=_set_logo_leds STOP=1

[gcode_macro _set_logo_leds_on]
gcode:
    SET_LED_EFFECT EFFECT=_set_logo_leds

[gcode_macro _set_nozzle_leds_on]
gcode:
    SET_LED_EFFECT EFFECT=_set_nozzle_leds

[gcode_macro _set_nozzle_leds_off]
gcode:
    SET_LED_EFFECT EFFECT=_set_nozzle_leds STOP=1

[gcode_macro _status_off]
gcode:
    STOP_LED_EFFECTS

[gcode_macro _status_ready]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_rainbow

[gcode_macro _status_part_ready]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_nozzle_part_ready
    SET_LED_EFFECT EFFECT=_sb_logo_part_ready

[gcode_macro _status_busy]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_busy
    _set_nozzle_leds_on

[gcode_macro _status_heating]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_heating
    SET_LED_EFFECT EFFECT=_sb_nozzle_heating

[gcode_macro _status_cooling]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_cooling
    SET_LED_EFFECT EFFECT=_sb_nozzle_cooling


[gcode_macro _status_leveling]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_leveling
    _set_nozzle_leds_on

[gcode_macro _status_homing]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_homing
    _set_nozzle_leds_on

[gcode_macro _status_cleaning]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_cleaning
    _set_nozzle_leds_on

[gcode_macro _status_meshing]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_meshing
    _set_nozzle_leds_on

[gcode_macro _status_calibrating_z]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_calibrating_z
    _set_nozzle_leds_on

[gcode_macro _status_printing]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=_sb_logo_printing
    _set_nozzle_leds_on


#####################################################################
#   Spoolman Macros
#####################################################################
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}


#####################################################################
#   Klipper Backup Macros
#####################################################################
[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True


#####################################################################
#   Speed Test Macro
#####################################################################
[gcode_macro _TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    